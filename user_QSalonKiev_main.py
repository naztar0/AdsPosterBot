#!/usr/bin/env python
import constants as c

from aiogram import Bot, Dispatcher, executor, types, utils
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from asyncio import get_event_loop, sleep
from datetime import datetime
import pickle
import json

bot = Bot(c.token1)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


main_text = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º ü§ó\n" \
            "–ù–∞—à [–∫–∞–Ω–∞–ª](https://t.me/QSalon_Kiev) –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω üëçüòä\n" \
            "–í—Å–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º üòé\n\n" \
            "–û–ó–ù–ê–ö–û–ú–¢–ï–°–¨ –° –í–ò–î–ï–û –ò–ù–°–¢–†–£–ö–¶–ò–ï–ô 2 –º–∏–Ω üíÅ‚Äç‚ôÇ\nhttps://bit.ly/2DR3Auk\n\n" \
            "üëâ *–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –æ–±—å—è–≤–ª–µ–Ω–∏—è:*\n" \
            "1. –ë—å—é—Ç–∏ –∏–ª–∏ —Ñ–æ—Ç–æ —É—Å–ª—É–≥–∏.\n" \
            "2. –î–∏–µ—Ç–æ–ª–æ–≥–∏, –°–ø–æ—Ä—Ç, –í—Ä–∞—á–∏, –ö—É—Ä—Å—ã\n" \
            "3. –í–∞–∫–∞–Ω—Å–∏–∏, —Å–¥–∞—á–∞ –≤ —Å–∞–ª–æ–Ω–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç, —Ä–µ–∫–ª–∞–º–∞ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –¥—Ä—É–≥–æ–µ."

sub_main_text = "*–í—ã–±–µ—Ä–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤–∞—à–∏—Ö —É—Å–ª—É–≥ (–æ–ø–ª–∞—Ç–∞ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–æ–∂–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è):*\n" \
                "1. –ú–æ–¥–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç.\n" \
                "2. –ú–æ–¥–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–æ 249 –≥—Ä–Ω.\n" \
                "3. –ú–æ–¥–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å—É–º–º—É –æ—Ç 250 –≥—Ä–Ω."

comm_text = "–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è? ü§î\n" \
            "–ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ ‚û°¬ª\n\n" \
            "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @rivikate"

ad_text_text = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ ü§ó\n\nüñêüñêüñê *–í–ê–ñ–ù–û!!!* üñêüñêüñê\n" \
               "*–ß–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨ –í –û–ë–Ø–õ–ï–ù–ò–ò:*\n\n" \
               "‚öò –ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Å–∞–ª–æ–Ω–µ/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)\n" \
               "‚öò –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —É—Å–ª—É–≥–∞?\n" \
               "‚öò –ì–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ —É—Å–ª—É–≥–∞?\n" \
               "‚öò –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É—Å–ª—É–≥–∏\n" \
               "üñê –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ)\n" \
               "üñê –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!"

media_text = "üëâ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∫ –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–µ –±–æ–ª—å—à–µ 3 —Ñ–æ—Ç–æ –∏–ª–∏ 1 –≤–∏–¥–µ–æ)\n\n" \
             "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ ‚û°¬ª.\n\n" \
             "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–î–∞–ª–µ–µ ‚û°¬ª –Ω–µ –≤–∏–¥–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ\nüñê –°–õ–ï–í–ê –û–¢ –ú–ò–ö–†–û–§–û–ù–ê –ö–í–ê–î–†–ê–¢–ò–ö üñê\n–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è üíÅ‚Äç‚ôÇüòä"

low_motivation_text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å ü§ó –í—ã —É–∂–µ 2 –Ω–µ–¥–µ–ª–∏ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —Å–≤–æ–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ ¬´–∏—â—É –º–æ–¥–µ–ª—å¬ª üò±üòä\n\n" \
                      "–ù–∞—à–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—Ç–µ—Ç –∏ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ö–æ—Ç—è—Ç —É–≤–∏–¥–µ—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—à—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é ü§îüòâ\n\n" \
                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ üòå"

post_cost_text = "–¶–µ–Ω–∞ –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {}"
requisites_text = "*–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ `5221 1911 0065 3194` _–ü–∞–Ω—á–µ–Ω–∫–æ –ê. –û._ \n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω/—Ñ–æ—Ç–æ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã."
pay_url_button = "https://www.privat24.ua/rd/transfer_to_card/?hash=rd%2Ftransfer_to_card%2F%7B%22from%22%3A%22%22%2C%22to%22%3A%22{card}%22%2C%22amt%22%3A%22{cost}%22%2C%22ccy%22%3A%22UAH%22%7D"
bye_text = "–ì–æ—Ç–æ–≤–æ ü•≥\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ª–æ–∂–µ–Ω–æ üåº\n–ñ–µ–ª–∞–µ–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞ –º—ã –≤–∞–º –≤ —ç—Ç–æ–º –ø–æ–º–æ–∂–µ–º üòâ\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –µ—â–µ ü§ó"
back_button = "‚¨Ö –ù–∞–∑–∞–¥"
next_button = "–î–∞–ª–µ–µ ‚û°"
complete_button = "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å"
main_button = "üåº –°–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"


class Form(StatesGroup):
    pay_photo = State()
    media = State()
    text = State()
    comment = State()
    confirm = State()


async def send_message(func, **kwargs):
    try:
        return await func(**kwargs)
    except utils.exceptions.BotBlocked: return
    except utils.exceptions.UserDeactivated: return
    except utils.exceptions.ChatNotFound: return
    except utils.exceptions.BadRequest: return


async def make_post(message, data):
    key = types.InlineKeyboardMarkup()

    first_name = str(message.from_user.first_name).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    username = str(message.from_user.username).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    comm = str(data['comm']).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    for admin in c.admins1:
        await send_message(bot.send_photo, chat_id=admin, photo=data['pay_photo'],
                           caption=f"–û–ø–ª–∞—Ç–∞: [{first_name}](tg://user?id={message.from_user.id})\n"
                           f"@{username}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comm}", parse_mode=types.ParseMode.MARKDOWN)
        if data['photo']:
            if len(data['photo']) == 1:
                key.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post"))
                await send_message(bot.send_photo, chat_id=admin, photo=data['photo'][0], caption=data['text'], reply_markup=key)
            else:
                key.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post_group"))
                photos = [types.InputMediaPhoto(data['photo'][0], caption=data['text'])] \
                    + [types.InputMediaPhoto(x) for x in data['photo'][1:]]
                m = await send_message(bot.send_media_group, chat_id=admin, media=photos)
                photo_group = json.dumps({"photo_group": [x.photo[-1].file_id for x in m]})
                await send_message(bot.send_message, chat_id=admin, text=f"{data['text']}\n\n{photo_group}", reply_markup=key)
        elif data['video']:
            key.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post"))
            await send_message(bot.send_video, chat_id=admin, video=data['video'], caption=data['text'], reply_markup=key)


async def confirm_post(message, data):
    if data['photo']:
        if len(data['photo']) == 1:
            await bot.send_photo(message.chat.id, data['photo'][0], caption=data['text'])
        else:
            photos = [types.InputMediaPhoto(data['photo'][0], caption=data['text'])] \
                + [types.InputMediaPhoto(x) for x in data['photo'][1:]]
            await bot.send_media_group(message.chat.id, photos)
    elif data['video']:
        await bot.send_video(message.chat.id, data['video'], caption=data['text'])


async def choose_service(message, cost_text, cost):
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(back_button)
    pay_key = types.InlineKeyboardMarkup()
    pay_key.add(types.InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç24", url=pay_url_button.format(card='5221191100653194', cost=cost)))
    await message.answer(post_cost_text.format(cost_text), reply_markup=key)
    await message.answer(requisites_text, reply_markup=pay_key, parse_mode=types.ParseMode.MARKDOWN)
    await Form.pay_photo.set()


async def back_function(message, state):
    if message.text in (back_button, '/start'):
        await state.update_data({'photo': None})
        await Form.media.set()
        key = types.ReplyKeyboardMarkup(resize_keyboard=True)
        key.add(next_button)
        key.add(back_button)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ, –Ω–∞—á–Ω—ë–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞...", reply_markup=key)
        await message.answer(media_text)
        return True


def main_key():
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(main_button)
    return key


async def main_inline_keys(message):
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton("1", callback_data="item_1")
    but_2 = types.InlineKeyboardButton("2", callback_data="item_2")
    but_3 = types.InlineKeyboardButton("3", callback_data="item_3")
    key.add(but_1, but_2, but_3)
    await message.answer(main_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=key, disable_web_page_preview=True)


@dp.message_handler(commands=['start'])
async def message_handler(message: types.Message):
    await bot.send_video(message.chat.id, c.tutorial_video_id_1)
    await main_inline_keys(message)


@dp.message_handler(commands=['start'], state=Form.pay_photo)
async def message_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_key())
    await main_inline_keys(message)


@dp.message_handler(commands=['reset'], state=Form)
async def message_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å", reply_markup=main_key())
    await main_inline_keys(message)


@dp.message_handler(content_types=['text'])
async def message_handler(message: types.Message):
    if message.text == main_button:
        await main_inline_keys(message)
    elif message.text == back_button:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_key())


@dp.message_handler(content_types=['text', 'photo'], state=Form.pay_photo)
async def photo_handler(message: types.Message, state: FSMContext):
    if not message.photo:
        if message.text == back_button:
            await state.finish()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_key())
        return

    await state.update_data({'pay_photo': message.photo[-1].file_id})
    await Form.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ –≤—ã–ª–æ–∂–∏—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –≤–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ üëå")
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(next_button)
    key.add(back_button)
    await message.answer(media_text, reply_markup=key)


@dp.message_handler(content_types=types.ContentType.ANY, state=Form.media)
async def media_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(back_button)

    data = await state.get_data()
    if message.text == next_button:
        await state.update_data({'video': None})
        if not data.get('photo'):
            await message.answer("–ú–µ–¥–∏–∞ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return
        await Form.next()
        await message.answer(ad_text_text, parse_mode="Markdown", reply_markup=key)

    elif message.photo:
        await state.update_data({'video': None})
        if data.get('photo'):
            if len(data['photo']) != 3:
                data['photo'].append(message.photo[-1].file_id)
            else:
                data['photo'] = None
                await message.answer("–ù–µ –±–æ–ª—å—à–µ 3-—Ö —Ñ–æ—Ç–æ üåº")
        else:
            data['photo'] = [message.photo[-1].file_id]
        await state.update_data({'photo': data['photo']})

    elif message.video:
        if data.get('photo'):
            await message.answer("–¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ!")
            return
        await state.update_data({'video': message.video.file_id, 'photo': None})
        await Form.next()
        await message.answer(ad_text_text, parse_mode="Markdown", reply_markup=key)

    else:
        if message.document:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª")
        else:
            await message.reply("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")


@dp.message_handler(content_types=['text'], state=Form.text)
async def text_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(next_button)
    key.add(back_button)
    if len(message.text) > 980:
        await message.answer("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
        return
    await state.update_data({'text': message.text})
    await Form.next()

    await message.answer(comm_text, reply_markup=key)


@dp.message_handler(content_types=['text'], state=Form.comment)
async def message_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    comm = "-"
    if message.text == next_button:
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    else:
        comm = message.text
    await state.update_data({'comm': comm})
    data = await state.get_data()
    await confirm_post(message, data)
    await Form.next()
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(complete_button)
    key.add(back_button)
    await message.answer("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
                         "–î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ù–ê–ñ–ú–ò–¢–ï ¬´‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨¬ª", reply_markup=key)


@dp.message_handler(content_types=['text'], state=Form.confirm)
async def message_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    elif message.text == complete_button:
        data = await state.get_data()
        await state.finish()
        await message.answer(bye_text, reply_markup=main_key())
        await make_post(message, data)
        with open(c.last_activity1, 'rt') as f:
            data = json.load(f)
        data[str(message.chat.id)] = int(datetime.now().timestamp())
        with open(c.last_activity1, 'wt') as f:
            json.dump(data, f)


def pickle_read(file):
    with open(file, 'rb') as f:
        try:
            return pickle.load(f)
        except Exception as e:
            return e


async def publish_to_channel(data):
    if len(data) == 3:
        text, photo, video = data
        if photo:
            await bot.send_photo(c.group1, photo, caption=text)
        elif video:
            await bot.send_video(c.group1, video, caption=text)
    else:
        text, photo_data = data
        photos = [types.InputMediaPhoto(photo_data[0], caption=text)] \
            + [types.InputMediaPhoto(x) for x in photo_data[1:]]
        await bot.send_media_group(c.group1, photos)


async def post_postponed_loop():
    while True:
        if 9 <= datetime.now().hour <= 23:
            last_publish_time: int = pickle_read(c.last_publish_time_1)
            if isinstance(last_publish_time, Exception):
                continue
            now = int(datetime.timestamp(datetime.now()))
            if now - last_publish_time > 1200:  # 1200 - 20 min
                postponed_posts: list = pickle_read(c.postponed_posts_1)
                if isinstance(postponed_posts, Exception):
                    continue
                if postponed_posts:
                    await publish_to_channel(postponed_posts.pop(0))
                    with open(c.last_publish_time_1, 'wb') as f:
                        pickle.dump(now, f)
                    with open(c.postponed_posts_1, 'wb') as f:
                        pickle.dump(postponed_posts, f)
        await sleep(200)  # 200 ~ 3 min


async def postpone_post(data):
    while True:
        postponed_posts: list = pickle_read(c.postponed_posts_1)
        if not isinstance(postponed_posts, Exception):
            break
    postponed_posts.append(data)
    with open(c.postponed_posts_1, 'wb') as f:
        pickle.dump(postponed_posts, f)


async def low_motivation_loop():
    while True:
        if 9 <= datetime.now().hour <= 23:
            now = int(datetime.now().timestamp())
            timer = now - 1209600  # 2 weeks
            with open(c.last_activity1, 'rt') as f:
                data = json.load(f)
            for user in data:
                if data[user] < timer:
                    data[user] = now
                    await send_message(bot.send_message, chat_id=int(user), text=low_motivation_text)
                    await sleep(.05)
            with open(c.last_activity1, 'wt') as f:
                json.dump(data, f)
        await sleep(43200)  # 1/2 day


@dp.callback_query_handler(lambda callback_query: True)
async def callback_inline(callback_query: types.CallbackQuery):
    text_data = callback_query.data
    if text_data == "post":
        try: await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id)
        except utils.exceptions.MessageNotModified: pass
        text = callback_query.message.caption
        photo = callback_query.message.photo
        video = callback_query.message.video
        if photo: photo = photo[-1].file_id
        if video: video = video.file_id
        await postpone_post((text, photo, video))
    elif text_data == "post_group":
        try: await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id)
        except utils.exceptions.MessageNotModified: pass
        data = str(callback_query.message.text)
        i = data.find('{"photo_group":')
        text = data[:i]
        photo_data = json.loads(data[i:])['photo_group']
        await postpone_post((text, photo_data))
    else:
        if text_data == "item_1":
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton("1", callback_data="sub_item_1")
            but_2 = types.InlineKeyboardButton("2", callback_data="sub_item_2")
            but_3 = types.InlineKeyboardButton("3", callback_data="sub_item_3")
            key.add(but_1, but_2, but_3)
            await callback_query.message.answer(sub_main_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=key)
        elif text_data == "sub_item_1":
            await choose_service(callback_query.message, "—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ 28 –≥—Ä–Ω üíÅ‚Äç‚ôÇ", 28)
        elif text_data == "sub_item_2":
            await choose_service(callback_query.message, "–≤—Å–µ–≥–æ 48 –≥—Ä–Ω üå∫", 48)
        elif text_data == "sub_item_3":
            await choose_service(callback_query.message, "–≤—Å–µ–≥–æ 95 –≥—Ä–Ω üå∫", 95)
        elif text_data == "item_2":
            await choose_service(callback_query.message, "–≤—Å–µ–≥–æ 140 –≥—Ä–Ω üå∫", 140)
        elif text_data == "item_3":
            await choose_service(callback_query.message, "237 –≥—Ä–Ω. –ú—ã –≤–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–æ 2000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–∞—Ä—É –¥–Ω–µ–π ü•≥", 237)
        try: await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        except utils.exceptions.MessageCantBeDeleted: pass
        except utils.exceptions.MessageToDeleteNotFound: pass


if __name__ == "__main__":
    loop = get_event_loop()
    loop.create_task(post_postponed_loop())
    loop.create_task(low_motivation_loop())
    executor.start_polling(dp, skip_updates=True)
